From: Thorsten Glaser <tg@mirbsd.org>
Date: Tue, 8 Nov 2011 22:33:12 +0000
Subject: [PATCH] fix mmap syscall on ARM

several issues found while debugging on the Debian armhf porterbox
on #debian-arm with pbrook (Paul Brook) and lindi- (Timo Juhani Lindfors)

- the comment only applies to the non-EABI part of the function
- "This is ARM code. But you've not maked mmap as a function symbol."
=> use the arm-features.h macros

--- a/arm/mmap.S
+++ b/arm/mmap.S
@@ -2,23 +2,14 @@
 
 #include <errno.h>
 #include "syscalls.h"
+#include "dietfeatures.h"
+#include "arm-features.h"
 
 .text
 
-@
-@ mmap takes 6 parameters - ie more than can be passed in registers via the
-@ regular syscall interface. Instead, parameters are passed on the stack.
-@
-@ On entry, the compiler will have already placed the fifth and sixth
-@ parameters on the stack - all we need do here is push the first four and
-@ call the syscall.
-@
-
-.global mmap
+FUNC_START	mmap
 
 #ifdef __ARM_EABI__
-
-mmap:
 	str     r5, [sp, #-4]!
 	ldr     r5, [sp, #8]
 	str     r4, [sp, #-4]!
@@ -32,9 +23,17 @@ mmap:
 	cmn	r0, #4096
 	RET
 
-#else	
-		
-mmap:
+#else
+
+@
+@ mmap takes 6 parameters - ie more than can be passed in registers via the
+@ regular syscall interface. Instead, parameters are passed on the stack.
+@
+@ On entry, the compiler will have already placed the fifth and sixth
+@ parameters on the stack - all we need do here is push the first four and
+@ call the syscall.
+@
+
 	stmdb	sp!, {r0, r1, r2, r3}
 	mov	r0, sp
 	swi	__NR_mmap
@@ -42,3 +41,5 @@ mmap:
 	b	__unified_syscall
 
 #endif
+
+FUNC_END	mmap
