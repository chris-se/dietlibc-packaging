From 0baf3bc9c91f0ac75da5044029ff36350a8a8ed4 Mon Sep 17 00:00:00 2001
From: Gerrit Pape <pape@smarden.org>
Date: Mon, 2 Jul 2007 09:58:14 +0000
Subject: [PATCH] workaround Bug#428814: [powerpc] error: initializer element is not constant

On Sat, Jun 30, 2007 at 11:24:15AM +0200, Matthias Klose wrote:
> Gerrit Pape writes:
> > On Thu, Jun 14, 2007 at 02:27:49PM +0200, Falk Hueffner wrote:
> > > Gerrit Pape <pape@dbnbgs.smarden.org> writes:
> > > > On a current Debian/powerpc sid system:
> > > >
> > > >  $ cat >ttt.c <<EOT
> > > >  static const double d[] = { 1.0l/6/1/2, -1.0l/30/3/4 };
> > > >  int main() { return 0; }
> > > >  EOT
> > > >  $ gcc-4.1 ttt.c
> > > >  ttt.c:1: error: initializer element is not constant
> > > >  ttt.c:1: error: (near initialization for 'd[0]')
> > > >  ttt.c:1: error: initializer element is not constant
> > > >  ttt.c:1: error: (near initialization for 'd[1]')
> > >
> > > This is http://gcc.gnu.org/bugzilla/show_bug.cgi?id=26374
> >
> > The dietlibc FTBFS because of this.
> >
> > gcc-4.2 4.2-20070627-1 has the same problem, is there a workaround?
>
> make the initializer double precision for now?
---
 libm/gamma.c |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/libm/gamma.c b/libm/gamma.c
index 9682f35..c0017b3 100644
--- a/libm/gamma.c
+++ b/libm/gamma.c
@@ -33,6 +33,22 @@ Return value    gamma returns a value in range (-0.1208, +oo). For a input
 #include <stdlib.h>
 #include <math.h>
 
+#if defined(__powerpc__)
+/* workaround #428814 */
+#define B0      +            1.0/   6/ 1/ 2
+#define B1      -            1.0/  30/ 3/ 4
+#define B2      +            1.0/  42/ 5/ 6
+#define B3      -            1.0/  30/ 7/ 8
+#define B4      +            5.0/  66/ 9/10
+#define B5      -          691.0/2730/11/12
+#define B6      +            7.0/   6/13/14
+#define B7      -         3617.0/ 510/15/16
+#define B8      +        43867.0/ 798/17/18
+#define B9      -       174611.0/ 330/19/20
+#define B10     +       854513.0/ 138/21/22
+#define B11     -    236364091.0/2730/23/24
+#define B12     +      8553103.0/   6/25/26
+#else
 #define B0      +            1.0l/   6/ 1/ 2
 #define B1      -            1.0l/  30/ 3/ 4
 #define B2      +            1.0l/  42/ 5/ 6
@@ -46,6 +62,7 @@ Return value    gamma returns a value in range (-0.1208, +oo). For a input
 #define B10     +       854513.0l/ 138/21/22
 #define B11     -    236364091.0l/2730/23/24
 #define B12     +      8553103.0l/   6/25/26
+#endif
 
 static const double  coeff[] = { B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10 };
 int                  signgam;
-- 
1.6.0.3

